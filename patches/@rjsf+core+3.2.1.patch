diff --git a/node_modules/@rjsf/core/dist/cjs/utils.js b/node_modules/@rjsf/core/dist/cjs/utils.js
index 00ea7d7..7a2bf42 100644
--- a/node_modules/@rjsf/core/dist/cjs/utils.js
+++ b/node_modules/@rjsf/core/dist/cjs/utils.js
@@ -150,7 +150,7 @@ function canExpand(schema, uiSchema, formData) {
   }
 
   var _getUiOptions = getUiOptions(uiSchema),
-      expandable = _getUiOptions.expandable;
+    expandable = _getUiOptions.expandable;
 
   if (expandable === false) {
     return expandable;
@@ -212,8 +212,8 @@ function getWidget(schema, widget) {
 
       Widget.MergedWidget = function (_ref) {
         var _ref$options = _ref.options,
-            options = _ref$options === void 0 ? {} : _ref$options,
-            props = _objectWithoutProperties(_ref, ["options"]);
+          options = _ref$options === void 0 ? {} : _ref$options,
+          props = _objectWithoutProperties(_ref, ["options"]);
 
         return _react["default"].createElement(Widget, _extends({
           options: _objectSpread({}, defaultOptions, options)
@@ -440,7 +440,7 @@ function getUiOptions(uiSchema) {
 function getDisplayLabel(schema, uiSchema, rootSchema) {
   var uiOptions = getUiOptions(uiSchema);
   var _uiOptions$label = uiOptions.label,
-      displayLabel = _uiOptions$label === void 0 ? true : _uiOptions$label;
+    displayLabel = _uiOptions$label === void 0 ? true : _uiOptions$label;
   var schemaType = getSchemaType(schema);
 
   if (schemaType === "array") {
@@ -477,7 +477,7 @@ function mergeObjects(obj1, obj2) {
 
   return Object.keys(obj2).reduce(function (acc, key) {
     var left = obj1 ? obj1[key] : {},
-        right = obj2[key];
+      right = obj2[key];
 
     if (obj1 && obj1.hasOwnProperty(key) && isObject(right)) {
       acc[key] = mergeObjects(left, right, concatArrays);
@@ -774,7 +774,7 @@ function resolveReference(schema, rootSchema, formData) {
   var $refSchema = findSchemaDefinition(schema.$ref, rootSchema); // Drop the $ref property of the source schema.
 
   var $ref = schema.$ref,
-      localSchema = _objectWithoutProperties(schema, ["$ref"]); // Update referenced schema definition with local schema properties.
+    localSchema = _objectWithoutProperties(schema, ["$ref"]); // Update referenced schema definition with local schema properties.
 
 
   return retrieveSchema(_objectSpread({}, $refSchema, localSchema), rootSchema, formData);
@@ -799,8 +799,8 @@ function retrieveSchema(schema) {
       console.warn("could not merge subschemas in allOf:\n" + e);
 
       var _resolvedSchema = resolvedSchema,
-          allOf = _resolvedSchema.allOf,
-          resolvedSchemaWithoutAllOf = _objectWithoutProperties(_resolvedSchema, ["allOf"]);
+        allOf = _resolvedSchema.allOf,
+        resolvedSchemaWithoutAllOf = _objectWithoutProperties(_resolvedSchema, ["allOf"]);
 
       return resolvedSchemaWithoutAllOf;
     }
@@ -818,8 +818,8 @@ function retrieveSchema(schema) {
 function resolveDependencies(schema, rootSchema, formData) {
   // Drop the dependencies from the source schema.
   var _schema$dependencies = schema.dependencies,
-      dependencies = _schema$dependencies === void 0 ? {} : _schema$dependencies,
-      resolvedSchema = _objectWithoutProperties(schema, ["dependencies"]);
+    dependencies = _schema$dependencies === void 0 ? {} : _schema$dependencies,
+    resolvedSchema = _objectWithoutProperties(schema, ["dependencies"]);
 
   if ("oneOf" in resolvedSchema) {
     resolvedSchema = resolvedSchema.oneOf[getMatchingOption(formData, resolvedSchema.oneOf, rootSchema)];
@@ -844,7 +844,7 @@ function processDependencies(dependencies, resolvedSchema, rootSchema, formData)
     }
 
     var dependencyValue = dependencies[dependencyKey],
-        remainingDependencies = _objectWithoutProperties(dependencies, [dependencyKey].map(_toPropertyKey));
+      remainingDependencies = _objectWithoutProperties(dependencies, [dependencyKey].map(_toPropertyKey));
 
     if (Array.isArray(dependencyValue)) {
       resolvedSchema = withDependentProperties(resolvedSchema, dependencyValue);
@@ -871,8 +871,8 @@ function withDependentProperties(schema, additionallyRequired) {
 
 function withDependentSchema(schema, rootSchema, formData, dependencyKey, dependencyValue) {
   var _retrieveSchema = retrieveSchema(dependencyValue, rootSchema, formData),
-      oneOf = _retrieveSchema.oneOf,
-      dependentSchema = _objectWithoutProperties(_retrieveSchema, ["oneOf"]);
+    oneOf = _retrieveSchema.oneOf,
+    dependentSchema = _objectWithoutProperties(_retrieveSchema, ["oneOf"]);
 
   schema = mergeSchemas(schema, dependentSchema); // Since it does not contain oneOf, we return the original schema.
 
@@ -904,7 +904,7 @@ function withExactlyOneSubschema(schema, rootSchema, formData, dependencyKey, on
       };
 
       var _validateFormData = (0, _validate["default"])(formData, conditionSchema),
-          errors = _validateFormData.errors;
+        errors = _validateFormData.errors;
 
       return errors.length === 0;
     }
@@ -918,8 +918,8 @@ function withExactlyOneSubschema(schema, rootSchema, formData, dependencyKey, on
   var subschema = validSubschemas[0];
 
   var _subschema$properties = subschema.properties,
-      conditionPropertySchema = _subschema$properties[dependencyKey],
-      dependentSubschema = _objectWithoutProperties(_subschema$properties, [dependencyKey].map(_toPropertyKey));
+    conditionPropertySchema = _subschema$properties[dependencyKey],
+    dependentSubschema = _objectWithoutProperties(_subschema$properties, [dependencyKey].map(_toPropertyKey));
 
   var dependentSchema = _objectSpread({}, subschema, {
     properties: dependentSubschema
@@ -938,7 +938,7 @@ function mergeSchemas(obj1, obj2) {
 
   return Object.keys(obj2).reduce(function (acc, key) {
     var left = obj1 ? obj1[key] : {},
-        right = obj2[key];
+      right = obj2[key];
 
     if (obj1 && obj1.hasOwnProperty(key) && isObject(right)) {
       acc[key] = mergeSchemas(left, right);
@@ -1039,7 +1039,7 @@ function deepEquals(a, b) {
 
 function shouldRender(comp, nextProps, nextState) {
   var props = comp.props,
-      state = comp.state;
+    state = comp.state;
   return !deepEquals(props, nextProps) || !deepEquals(state, nextState);
 }
 
@@ -1068,8 +1068,8 @@ function toIdSchema(schema, id, rootSchema) {
     var field = schema.properties[name];
     var fieldId = idSchema.$id + "_" + name;
     idSchema[name] = toIdSchema(isObject(field) ? field : {}, fieldId, rootSchema, // It's possible that formData is not an object -- this can happen if an
-    // array item has just been added, but not populated with data yet
-    (formData || {})[name], idPrefix);
+      // array item has just been added, but not populated with data yet
+      (formData || {})[name], idPrefix);
   }
 
   return idSchema;
@@ -1100,8 +1100,35 @@ function toPathSchema(schema) {
   } else if (schema.hasOwnProperty("properties")) {
     for (var property in schema.properties) {
       pathSchema[property] = toPathSchema(schema.properties[property], "".concat(name, ".").concat(property), rootSchema, // It's possible that formData is not an object -- this can happen if an
-      // array item has just been added, but not populated with data yet
-      (formData || {})[property]);
+        // array item has just been added, but not populated with data yet
+        (formData || {})[property]);
+    }
+  }
+
+  if (schema.hasOwnProperty("oneOf")) {
+    let option = getMatchingOption(formData, schema.oneOf, rootSchema);
+    let returnVal = toPathSchema(
+      schema.oneOf[option],
+      `oneOf.${option}`,
+      rootSchema, formData
+    );
+    for (const property in returnVal) {
+      if (property != '$name') {
+        pathSchema[property] = returnVal[property];
+      }
+    }
+  }
+  if (schema.hasOwnProperty("anyOf")) {
+    let option = getMatchingOption(formData, schema.anyOf, rootSchema);
+    let returnVal = toPathSchema(
+      schema.anyOf[option],
+      `anyOf.${option}`,
+      rootSchema, formData
+    );
+    for (const property in returnVal) {
+      if (property != '$name') {
+        pathSchema[property] = returnVal[property];
+      }
     }
   }
 
@@ -1141,14 +1168,14 @@ function parseDateString(dateString) {
 
 function toDateString(_ref2) {
   var year = _ref2.year,
-      month = _ref2.month,
-      day = _ref2.day,
-      _ref2$hour = _ref2.hour,
-      hour = _ref2$hour === void 0 ? 0 : _ref2$hour,
-      _ref2$minute = _ref2.minute,
-      minute = _ref2$minute === void 0 ? 0 : _ref2$minute,
-      _ref2$second = _ref2.second,
-      second = _ref2$second === void 0 ? 0 : _ref2$second;
+    month = _ref2.month,
+    day = _ref2.day,
+    _ref2$hour = _ref2.hour,
+    hour = _ref2$hour === void 0 ? 0 : _ref2$hour,
+    _ref2$minute = _ref2.minute,
+    minute = _ref2$minute === void 0 ? 0 : _ref2$minute,
+    _ref2$second = _ref2.second,
+    second = _ref2$second === void 0 ? 0 : _ref2$second;
   var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
   var utcTime = Date.UTC(year, month - 1, day, hour, minute, second);
   var datetime = new Date(utcTime).toJSON();
diff --git a/node_modules/@rjsf/core/dist/es/utils.js b/node_modules/@rjsf/core/dist/es/utils.js
index 7f1fa15..ec85638 100644
--- a/node_modules/@rjsf/core/dist/es/utils.js
+++ b/node_modules/@rjsf/core/dist/es/utils.js
@@ -89,7 +89,7 @@ export function canExpand(schema, uiSchema, formData) {
   }
 
   var _getUiOptions = getUiOptions(uiSchema),
-      expandable = _getUiOptions.expandable;
+    expandable = _getUiOptions.expandable;
 
   if (expandable === false) {
     return expandable;
@@ -148,8 +148,8 @@ export function getWidget(schema, widget) {
 
       Widget.MergedWidget = function (_ref) {
         var _ref$options = _ref.options,
-            options = _ref$options === void 0 ? {} : _ref$options,
-            props = _objectWithoutProperties(_ref, ["options"]);
+          options = _ref$options === void 0 ? {} : _ref$options,
+          props = _objectWithoutProperties(_ref, ["options"]);
 
         return React.createElement(Widget, _extends({
           options: _objectSpread({}, defaultOptions, options)
@@ -372,7 +372,7 @@ export function getUiOptions(uiSchema) {
 export function getDisplayLabel(schema, uiSchema, rootSchema) {
   var uiOptions = getUiOptions(uiSchema);
   var _uiOptions$label = uiOptions.label,
-      displayLabel = _uiOptions$label === void 0 ? true : _uiOptions$label;
+    displayLabel = _uiOptions$label === void 0 ? true : _uiOptions$label;
   var schemaType = getSchemaType(schema);
 
   if (schemaType === "array") {
@@ -407,7 +407,7 @@ export function mergeObjects(obj1, obj2) {
 
   return Object.keys(obj2).reduce(function (acc, key) {
     var left = obj1 ? obj1[key] : {},
-        right = obj2[key];
+      right = obj2[key];
 
     if (obj1 && obj1.hasOwnProperty(key) && isObject(right)) {
       acc[key] = mergeObjects(left, right, concatArrays);
@@ -688,7 +688,7 @@ function resolveReference(schema, rootSchema, formData) {
   var $refSchema = findSchemaDefinition(schema.$ref, rootSchema); // Drop the $ref property of the source schema.
 
   var $ref = schema.$ref,
-      localSchema = _objectWithoutProperties(schema, ["$ref"]); // Update referenced schema definition with local schema properties.
+    localSchema = _objectWithoutProperties(schema, ["$ref"]); // Update referenced schema definition with local schema properties.
 
 
   return retrieveSchema(_objectSpread({}, $refSchema, localSchema), rootSchema, formData);
@@ -713,8 +713,8 @@ export function retrieveSchema(schema) {
       console.warn("could not merge subschemas in allOf:\n" + e);
 
       var _resolvedSchema = resolvedSchema,
-          allOf = _resolvedSchema.allOf,
-          resolvedSchemaWithoutAllOf = _objectWithoutProperties(_resolvedSchema, ["allOf"]);
+        allOf = _resolvedSchema.allOf,
+        resolvedSchemaWithoutAllOf = _objectWithoutProperties(_resolvedSchema, ["allOf"]);
 
       return resolvedSchemaWithoutAllOf;
     }
@@ -732,8 +732,8 @@ export function retrieveSchema(schema) {
 function resolveDependencies(schema, rootSchema, formData) {
   // Drop the dependencies from the source schema.
   var _schema$dependencies = schema.dependencies,
-      dependencies = _schema$dependencies === void 0 ? {} : _schema$dependencies,
-      resolvedSchema = _objectWithoutProperties(schema, ["dependencies"]);
+    dependencies = _schema$dependencies === void 0 ? {} : _schema$dependencies,
+    resolvedSchema = _objectWithoutProperties(schema, ["dependencies"]);
 
   if ("oneOf" in resolvedSchema) {
     resolvedSchema = resolvedSchema.oneOf[getMatchingOption(formData, resolvedSchema.oneOf, rootSchema)];
@@ -758,7 +758,7 @@ function processDependencies(dependencies, resolvedSchema, rootSchema, formData)
     }
 
     var dependencyValue = dependencies[dependencyKey],
-        remainingDependencies = _objectWithoutProperties(dependencies, [dependencyKey].map(_toPropertyKey));
+      remainingDependencies = _objectWithoutProperties(dependencies, [dependencyKey].map(_toPropertyKey));
 
     if (Array.isArray(dependencyValue)) {
       resolvedSchema = withDependentProperties(resolvedSchema, dependencyValue);
@@ -785,8 +785,8 @@ function withDependentProperties(schema, additionallyRequired) {
 
 function withDependentSchema(schema, rootSchema, formData, dependencyKey, dependencyValue) {
   var _retrieveSchema = retrieveSchema(dependencyValue, rootSchema, formData),
-      oneOf = _retrieveSchema.oneOf,
-      dependentSchema = _objectWithoutProperties(_retrieveSchema, ["oneOf"]);
+    oneOf = _retrieveSchema.oneOf,
+    dependentSchema = _objectWithoutProperties(_retrieveSchema, ["oneOf"]);
 
   schema = mergeSchemas(schema, dependentSchema); // Since it does not contain oneOf, we return the original schema.
 
@@ -818,7 +818,7 @@ function withExactlyOneSubschema(schema, rootSchema, formData, dependencyKey, on
       };
 
       var _validateFormData = validateFormData(formData, conditionSchema),
-          errors = _validateFormData.errors;
+        errors = _validateFormData.errors;
 
       return errors.length === 0;
     }
@@ -832,8 +832,8 @@ function withExactlyOneSubschema(schema, rootSchema, formData, dependencyKey, on
   var subschema = validSubschemas[0];
 
   var _subschema$properties = subschema.properties,
-      conditionPropertySchema = _subschema$properties[dependencyKey],
-      dependentSubschema = _objectWithoutProperties(_subschema$properties, [dependencyKey].map(_toPropertyKey));
+    conditionPropertySchema = _subschema$properties[dependencyKey],
+    dependentSubschema = _objectWithoutProperties(_subschema$properties, [dependencyKey].map(_toPropertyKey));
 
   var dependentSchema = _objectSpread({}, subschema, {
     properties: dependentSubschema
@@ -852,7 +852,7 @@ export function mergeSchemas(obj1, obj2) {
 
   return Object.keys(obj2).reduce(function (acc, key) {
     var left = obj1 ? obj1[key] : {},
-        right = obj2[key];
+      right = obj2[key];
 
     if (obj1 && obj1.hasOwnProperty(key) && isObject(right)) {
       acc[key] = mergeSchemas(left, right);
@@ -952,7 +952,7 @@ export function deepEquals(a, b) {
 }
 export function shouldRender(comp, nextProps, nextState) {
   var props = comp.props,
-      state = comp.state;
+    state = comp.state;
   return !deepEquals(props, nextProps) || !deepEquals(state, nextState);
 }
 export function toIdSchema(schema, id, rootSchema) {
@@ -980,8 +980,8 @@ export function toIdSchema(schema, id, rootSchema) {
     var field = schema.properties[name];
     var fieldId = idSchema.$id + "_" + name;
     idSchema[name] = toIdSchema(isObject(field) ? field : {}, fieldId, rootSchema, // It's possible that formData is not an object -- this can happen if an
-    // array item has just been added, but not populated with data yet
-    (formData || {})[name], idPrefix);
+      // array item has just been added, but not populated with data yet
+      (formData || {})[name], idPrefix);
   }
 
   return idSchema;
@@ -1011,8 +1011,35 @@ export function toPathSchema(schema) {
   } else if (schema.hasOwnProperty("properties")) {
     for (var property in schema.properties) {
       pathSchema[property] = toPathSchema(schema.properties[property], "".concat(name, ".").concat(property), rootSchema, // It's possible that formData is not an object -- this can happen if an
-      // array item has just been added, but not populated with data yet
-      (formData || {})[property]);
+        // array item has just been added, but not populated with data yet
+        (formData || {})[property]);
+    }
+  }
+
+  if (schema.hasOwnProperty("oneOf")) {
+    let option = getMatchingOption(formData, schema.oneOf, rootSchema);
+    let returnVal = toPathSchema(
+      schema.oneOf[option],
+      `oneOf.${option}`,
+      rootSchema, formData
+    );
+    for (const property in returnVal) {
+      if (property != '$name') {
+        pathSchema[property] = returnVal[property];
+      }
+    }
+  }
+  if (schema.hasOwnProperty("anyOf")) {
+    let option = getMatchingOption(formData, schema.anyOf, rootSchema);
+    let returnVal = toPathSchema(
+      schema.anyOf[option],
+      `anyOf.${option}`,
+      rootSchema, formData
+    );
+    for (const property in returnVal) {
+      if (property != '$name') {
+        pathSchema[property] = returnVal[property];
+      }
     }
   }
 
@@ -1050,14 +1077,14 @@ export function parseDateString(dateString) {
 }
 export function toDateString(_ref2) {
   var year = _ref2.year,
-      month = _ref2.month,
-      day = _ref2.day,
-      _ref2$hour = _ref2.hour,
-      hour = _ref2$hour === void 0 ? 0 : _ref2$hour,
-      _ref2$minute = _ref2.minute,
-      minute = _ref2$minute === void 0 ? 0 : _ref2$minute,
-      _ref2$second = _ref2.second,
-      second = _ref2$second === void 0 ? 0 : _ref2$second;
+    month = _ref2.month,
+    day = _ref2.day,
+    _ref2$hour = _ref2.hour,
+    hour = _ref2$hour === void 0 ? 0 : _ref2$hour,
+    _ref2$minute = _ref2.minute,
+    minute = _ref2$minute === void 0 ? 0 : _ref2$minute,
+    _ref2$second = _ref2.second,
+    second = _ref2$second === void 0 ? 0 : _ref2$second;
   var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
   var utcTime = Date.UTC(year, month - 1, day, hour, minute, second);
   var datetime = new Date(utcTime).toJSON();